version: 2.1

parameters:
  deploy-infra:
    type: string
    default: aws
  remove-deployment:
    type: boolean
    default: true
  wait-for-external-pipeline:
    type: integer
    default: 0

jobs:
  "Create Root CA":
    # IP ranges are only supported for Docker executors, disabling for now
    #circleci_ip_ranges: true        # https://circleci.com/docs/ip-ranges
    machine:
      image: ubuntu-2204:2024.01.1  # https://circleci.com/docs/configuration-reference#available-linux-machine-images-cloud
    resource_class: medium          # https://circleci.com/docs/configuration-reference/#linuxvm-execution-environment
    steps:
      - checkout
      - run:
          name: Generate Ansible inventory and variable files based on YAML config
          command: cd bin && ./decrypt_secrets.sh && ./config_build.sh
      - run:
          name: Running certificate creation script
          command: cd bin && ./install_ca.sh
      - run:
          # This step is necessary because the docker container runs and
          # creates files in mounted volumes as root
          name: Resetting file ownership
          command: sudo chown -R circleci:circleci ansible
      - persist_to_workspace:
          root: ansible
          paths:
            - "myCA"
  "Deploy SD-WAN":
    # IP ranges are only supported for Docker executors, disabling for now
    #circleci_ip_ranges: true        # https://circleci.com/docs/ip-ranges
    machine:
      image: ubuntu-2204:2024.01.1  # https://circleci.com/docs/configuration-reference#available-linux-machine-images-cloud
    resource_class: medium          # https://circleci.com/docs/configuration-reference/#linuxvm-execution-environment
    environment:
      SDWAN_CONTROL_INFRA: << pipeline.parameters.deploy-infra >>
    steps:
      - checkout
      - run:
          name: Sync Git submodules
          command: git submodule sync
      - run:
          name: Checkout Git submodules
          command: git submodule update --init
      - attach_workspace:
          at: ansible
      - run:
          name: Generate Ansible inventory and variable files based on YAML config
          command: cd bin && ./decrypt_secrets.sh && ./config_build.sh
      - run:
          name: Connect VPN to on-prem DC
          command: sudo apt install -y openconnect && ./bin/vpn.sh
      - run:
          name: Creating networks and VMs
          command: cd bin && ./play.sh -v /ansible/day_0/deploy-control-plane.yml
      - run:
          name: Waiting 10 minutes
          command: sleep 600
          no_output_timeout: 30m
      - run:
          name: SD-WAN control plane day 0 configuration
          command: cd bin && ./play.sh -v /ansible/day_0/config-control-plane.yml
      - run:
          name: Onboarding SD-WAN edges
          command: cd bin && ./play.sh -v /ansible/day_0/onboard-edges.yml
      # This is fragile, and doesn't work well with 20.12, so disable it until we can look into it
      # - run:
      #     name: SD-WAN control plane day 1 configuration
      #     command: cd bin && ./play.sh -v /ansible/day_1/config-sdwan.yml
      # This is a hack, will need to find an infra independent way to export this
      # We can start with an ansible fact, but ideally Vault or equivalent
      - run:
          name: Exporting vManage external IP as shell variable VMANAGE_EXTERNAL_IP
          command: export VMANAGE_EXTERNAL_IP=$(jq -r '.outputs.vmanages_vmanageEth0EIP.value[0]' terraform-sdwan/aws/Provision_Instances/terraform.tfstate.d/aws_control/terraform.tfstate) && echo $VMANAGE_EXTERNAL_IP
      - run:
          name: Cleaning up due to failure
          command: cd bin && ./play.sh -v /ansible/day_0/clean-edges.yml; ./play.sh -v /ansible/day_0/clean-control-plane.yml
          when: on_fail
      - unless:
          condition:
            equal: [ 0, << pipeline.parameters.wait-for-external-pipeline >> ]
          steps:
            - run:
                name: Triggering external pipeline
                command: |
                  curl -X POST https://circleci.com/api/v2/project/gh/$EXTERNAL_PIPELINE_REPOUSER/$EXTERNAL_PIPELINE_REPONAME/pipeline \
                    -H "Circle-Token: $CIRCLE_TOKEN" -H "Content-Type: application/json" \
                    -d "{\"branch\":\"$EXTERNAL_PIPELINE_BRANCH\",\"parameters\":{\"vmanage_host\":\"$VMANAGE_EXTERNAL_IP\"}}}"
            # Another hack, a proper inter-pipeline communication is needed (or a single pipeline)
            - run:
                name: Waiting for external pipeline to run
                command: sleep << pipeline.parameters.wait-for-external-pipeline >>
      - when:
          condition: << pipeline.parameters.remove-deployment >>
          steps:
            - run:
                name: Removing edge devices deployment (VMs and networks)
                command: cd bin && ./play.sh -v /ansible/day_0/clean-edges.yml
            - run:
                name: Removing control plane deployment (VMs and networks)
                command: cd bin && ./play.sh -v /ansible/day_0/clean-control-plane.yml

workflows:
  "Test end-to-end SD-WAN deployment":
    jobs:
      - "Create Root CA"
      - "Deploy SD-WAN":
          requires:
            - "Create Root CA"
