- name: Build the topology
  hosts: localhost
  gather_facts: no
  tags:
    - virl
    - network
  # vars:
  #   virl_lab: "{{ lookup('env', 'VIRL_LAB') | default('None', true) }}"
  tasks:
    - name: Check for the lab file
      stat:
        path: "{{ virl_lab_file }}"
      register: stat_result
      delegate_to: localhost
      run_once: yes

    - assert:
        that:
          - stat_result.stat.exists
          - virl_host != ""
          - virl_username != ""
          - virl_password != ""
          - virl_lab != ""
        msg: "VIRL host, credentials, and topology file are required.  Verify the requirements in README are met."
      delegate_to: localhost
      run_once: yes

    - name: Create the lab
      virl_lab:
        host: "{{ virl_host }}"
        user: "{{ virl_username }}"
        password: "{{ virl_password }}"
        lab: "{{ virl_lab }}"
        state: present
        file: "{{ virl_lab_file }}"
      register: results

    - name: Refresh Inventory
      meta: refresh_inventory    

- name: Start unmanaged nodes
  hosts: external_connector:unmanaged_switch
  connection: local
  gather_facts: no
  tags:
    - start
    - network
  tasks:
    - name: Start dumb stuff (not a judgement)
      virl_node:
        name: "{{ inventory_hostname }}"
        host: "{{ virl_host }}"
        user: "{{ virl_username }}"
        password: "{{ virl_password }}"
        lab: "{{ virl_lab }}"
        state: started

- name: Start the network
  hosts: network:&virl_hosts
  connection: local
  gather_facts: no
  tags:
    - start
    - network
  tasks:
    - name: Generating day0 config
      set_fact:
        day0_config: "{{ lookup('template', virl_config_template) }}"
      when: virl_config_template is defined

    - name: Start Node
      virl_node:
        name: "{{ inventory_hostname }}"
        host: "{{ virl_host }}"
        user: "{{ virl_username }}"
        password: "{{ virl_password }}"
        lab: "{{ virl_lab }}"
        state: started
        image_definition: "{{ virl_image_definition | default(omit) }}"
        config: "{{ day0_config | default(omit) }}"

- name: Check initial topology connectivity
  hosts: internet:&virl_hosts
  connection: local
  tags:
    - check_control
    - check_all
    - network
    - CA
  any_errors_fatal: true
  gather_facts: no
  tasks:
    - name: Wait until the mgmt interface comes up
      virl_lab_facts:
        host: "{{ virl_host }}"
        user: "{{ virl_username }}"
        password: "{{ virl_password }}"
        lab: "{{ virl_lab }}"
      register: result
      until: result.virl_facts.nodes[inventory_hostname].ansible_host is defined and result.virl_facts.nodes[inventory_hostname].ansible_host
      # when: virl_mgmt_interface is defined
      retries: 60
      delay: 10

    - name: Refresh Inventory
      meta: refresh_inventory

    - name: Ping outside interface of Internet routers
      ios_ping:
        dest: "{{ hostvars[item].interfaces.GigabitEthernet2.ip.primary | ipaddr('address') }}"
      loop: "{{ groups.internet_routers | intersect(groups.virl_hosts) }}"
      register: result
      retries: 60
      delay: 10
      until: result is not failed
      connection: network_cli

    - name: Ping inside interface of Internet routers
      ios_ping:
        dest: "{{ hostvars[item].interfaces.GigabitEthernet3.ip.primary | ipaddr('address') }}"
      loop: "{{ groups.internet_routers | intersect(groups.virl_hosts) }}"
      register: result
      retries: 60
      delay: 10
      until: result is not failed
      connection: network_cli

- name: Start Systems
  hosts: system:&virl_hosts
  connection: local
  gather_facts: no
  tags:
    - start
    - network
  tasks:
    - name: Generating day0 config
      set_fact:
        day0_config: "{{ lookup('template', virl_config_template) }}"
      when: virl_config_template is defined

    - name: Start Node
      virl_node:
        name: "{{ inventory_hostname }}"
        host: "{{ virl_host }}"
        user: "{{ virl_username }}"
        password: "{{ virl_password }}"
        lab: "{{ virl_lab }}"
        state: started
        image_definition: "{{ virl_image_definition | default(omit) }}"
        config: "{{ day0_config | default(omit) }}"

- name: Start the SD-WAN control nodes
  hosts: sdwan_control:&virl_hosts
  connection: local
  gather_facts: no
  tags:
    - start_control
    - control
  tasks:
    - name: Generating day0 config
      set_fact:
        day0_config: "{{ lookup('template', virl_config_template) }}"
      when: virl_config_template is defined

    - name: Start Node
      virl_node:
        name: "{{ inventory_hostname }}"
        host: "{{ virl_host }}"
        user: "{{ virl_username }}"
        password: "{{ virl_password }}"
        lab: "{{ virl_lab }}"
        state: started
        image_definition: "{{ virl_image_definition | default(omit) }}"
        config: "{{ day0_config | default(omit) }}"

# - hosts: network:sdwan_control:&virl_hosts
#   connection: local
#   any_errors_fatal: true
#   gather_facts: no
#   tasks:
#     - name: Wait until the mgmt interface comes up
#       virl_lab_facts:
#         host: "{{ virl_host }}"
#         user: "{{ virl_username }}"
#         password: "{{ virl_password }}"
#         lab: "{{ virl_lab }}"
#       register: result
#       until: result.virl_facts.nodes[inventory_hostname].interfaces[virl_mgmt_interface].ipv4_addresses | default(0) | count > 0
#       when: virl_mgmt_interface is defined
#       retries: 12
#       delay: 10

#     - name: Refresh Inventory
#       meta: refresh_inventory

# - name: Push NETCONF template
#   hosts: vbond_hosts:&virl_hosts
#   connection: local
#   tags:
#     - control
#     - netconf
#   any_errors_fatal: true
#   gather_facts: no
#   tasks:
#     - netconf_config:
#         content: "{{ lookup('template', 'viptela/netconf.j2') }}"
#       connection: netconf

# - name: Check connectivity to the SD-WAN control nodes
#   hosts: internet_routers:&virl_hosts
#   connection: network_cli
#   tags:
#     - control
#     - check_control
#     - check_all
#   any_errors_fatal: true
#   gather_facts: no
#   tasks:
#     - ios_ping:
#         dest: "{{ hostvars[item].vpn_instances[0].interfaces[0].ip.address | ipaddr('address') }}"
#       loop: "{{ groups.sdwan_control }}"
#       register: result
#       retries: 60
#       delay: 10
#       until: result is not failed