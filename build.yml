- name: Check playbook requirements
  hosts: localhost
  connection: network_cli
  tags:
    - network
    - CA
  any_errors_fatal: true
  gather_facts: no
  tasks:
    - name: Check for the license file
      stat:
        path: "{{ serial_number_file }}"
      register: stat_result
      delegate_to: localhost
      run_once: yes

    - assert:
        that:
          - stat_result.stat.exists
          - vmanage_org != ""
        msg: "'vmanage_org' must be defined and {{ serial_number_file }} must exist.  Verify the requirements in README are met."
      delegate_to: localhost
      run_once: yes

- name: Build the topology
  hosts: localhost
  gather_facts: no
  roles:
    - ansible-virl
  tags:
    - virl
    - network
  # vars:
  #   virl_tag: "{{ lookup('env', 'USER') | default('None', true) }}"
  #   virl_lab: "{{ virl_tag }}-{{ virl_lab_name }}"
  tasks:
    - name: Check for the lab file
      stat:
        path: "{{ virl_lab_file }}"
      register: stat_result
      delegate_to: localhost
      run_once: yes

    - assert:
        that:
          - stat_result.stat.exists
          - virl_host != ""
          - virl_username != ""
          - virl_password != ""
          - virl_lab != ""
        msg: "VIRL host, credentials, and topology file are required.  Verify the requirements in README are met."
      delegate_to: localhost
      run_once: yes

    - name: Create the lab
      virl_lab:
        host: "{{ virl_host }}"
        user: "{{ virl_username }}"
        password: "{{ virl_password }}"
        lab: "{{ virl_lab }}"
        state: present
        file: "{{ virl_lab_file }}"
      register: results

    - debug:
        var: results

    - name: Refresh Inventory
      meta: refresh_inventory    

- name: Start unmanaged nodes
  hosts: external_connector:unmanaged_switch
  connection: local
  gather_facts: no
  roles:
    - ansible-virl
  tags:
    - start
    - network
  tasks:
    - name: Start dumb stuff (not a judgement)
      virl_node:
        name: "{{ inventory_hostname }}"
        host: "{{ virl_host }}"
        user: "{{ virl_username }}"
        password: "{{ virl_password }}"
        lab: "{{ virl_lab }}"
        state: started

- name: Start the network
  hosts: network:&virl_hosts
  connection: local
  gather_facts: no
  tags:
    - start
    - network
  roles:
    - ansible-virl
  tasks:
    - name: Generating day0 config
      set_fact:
        day0_config: "{{ lookup('template', virl.config_template) }}"
      when: virl.config_template is defined

    - name: Start Node
      virl_node:
        name: "{{ inventory_hostname }}"
        host: "{{ virl_host }}"
        user: "{{ virl_username }}"
        password: "{{ virl_password }}"
        lab: "{{ virl_lab }}"
        state: started
        image_definition: "{{ virl.image_definition | default(omit) }}"
        config: "{{ day0_config | default(omit) }}"

- name: Check initial topology connectivity
  hosts: internet
  connection: local
  tags:
    - check_control
    - check_all
    - network
    - CA
  any_errors_fatal: true
  gather_facts: no
  tasks:
    - name: Wait until the mgmt interface comes up
      virl_lab_facts:
        host: "{{ virl_host }}"
        user: "{{ virl_username }}"
        password: "{{ virl_password }}"
        lab: "{{ virl_lab }}"
      register: result
      until: result.virl_facts.nodes[inventory_hostname].interfaces[virl.mgmt_interface].ipv4_addresses | count > 0
      when: virl is defined and virl.mgmt_interface is defined
      retries: 12
      delay: 10

    - name: Refresh Inventory
      meta: refresh_inventory

    - name: Ping outside interface of Internet routers
      ios_ping:
        dest: "{{ hostvars[item].interfaces.GigabitEthernet2.ip.primary | ipaddr('address') }}"
      loop: "{{ groups.internet_routers | intersect(groups.virl_hosts) }}"
      register: result
      retries: 60
      delay: 10
      until: result is not failed
      connection: network_cli

    - name: Ping inside interface of Internet routers
      ios_ping:
        dest: "{{ hostvars[item].interfaces.GigabitEthernet3.ip.primary | ipaddr('address') }}"
      loop: "{{ groups.internet_routers | intersect(groups.virl_hosts) }}"
      register: result
      retries: 60
      delay: 10
      until: result is not failed
      connection: network_cli

- name: Start Systems
  hosts: system:&virl_hosts
  connection: local
  gather_facts: no
  roles:
    - ansible-virl
  tags:
    - start
    - network
  tasks:
    - name: Generating day0 config
      set_fact:
        day0_config: "{{ lookup('template', virl.config_template) }}"
      when: virl.config_template is defined

    - name: Start Node
      virl_node:
        name: "{{ inventory_hostname }}"
        host: "{{ virl_host }}"
        user: "{{ virl_username }}"
        password: "{{ virl_password }}"
        lab: "{{ virl_lab }}"
        state: started
        image_definition: "{{ virl.image_definition | default(omit) }}"
        config: "{{ day0_config | default(omit) }}"

- name: Start the SD-WAN control nodes
  hosts: sdwan_control:&virl_hosts
  connection: local
  gather_facts: no
  tags:
    - start_control
    - control
  roles:
    - ansible-virl
  tasks:
    - name: Generating day0 config
      set_fact:
        day0_config: "{{ lookup('template', virl.config_template) }}"
      when: virl.config_template is defined

    - name: Start Node
      virl_node:
        name: "{{ inventory_hostname }}"
        host: "{{ virl_host }}"
        user: "{{ virl_username }}"
        password: "{{ virl_password }}"
        lab: "{{ virl_lab }}"
        state: started
        image_definition: "{{ virl.image_definition | default(omit) }}"
        config: "{{ day0_config | default(omit) }}"

- name: Configure the SD-WAN control nodes
  hosts: vbond_hosts:&virl_hosts
  connection: local
  tags:
    - control
    - netconf
  any_errors_fatal: true
  gather_facts: no
  tasks:
    - name: Wait until the mgmt interface comes up
      virl_lab_facts:
        host: "{{ virl_host }}"
        user: "{{ virl_username }}"
        password: "{{ virl_password }}"
        lab: "{{ virl_lab }}"
      register: result
      until: result.virl_facts.nodes[inventory_hostname].interfaces[virl.mgmt_interface].ipv4_addresses | count > 0
      when: virl is defined and virl.mgmt_interface is defined
      retries: 12
      delay: 10

    - name: Refresh Inventory
      meta: refresh_inventory

    - name: Push NETCONF template
      netconf_config:
        content: "{{ lookup('template', 'viptela/netconf.j2') }}"
      connection: netconf

- name: Check connectivity to the SD-WAN control nodes
  hosts: internet_routers:&virl_hosts
  connection: network_cli
  tags:
    - control
    - check_control
    - check_all
  any_errors_fatal: true
  gather_facts: no
  tasks:
    - ios_ping:
        dest: "{{ hostvars[item].vpn_instances[0].interfaces[0].ip.address | ipaddr('address') }}"
      loop: "{{ groups.sdwan_control }}"
      register: result
      retries: 60
      delay: 10
      until: result is not failed

- name: Copy CA to controllers
  hosts: vbond_hosts:vsmart1
  tags:
    - control
    - debug
  any_errors_fatal: true
  gather_facts: no
  vars:
    ansible_network_os: ios
  tasks:
    - name: Copy Root CA to controllers
      copy:
        src: "{{ viptela_cert_dir }}/myCA.pem"
        dest: /home/admin
      register: copy_results

    - name: Install RootCA
      cli_command:
        command: "request root-cert-chain install /home/admin/myCA.pem"
      register: command_result
      connection: network_cli
      failed_when: "'Failed' in command_result.stdout"

- name: Verify that vManage is fully operational
  hosts: localhost
  connection: local
  tags:
    - check_control
    - check_all
    - control
    - CA
  any_errors_fatal: true
  gather_facts: no
  tasks:
    - set_fact:
        vmanage_host: "{{ groups.vmanage_hosts | first }}"

    - set_fact:
        vmanage_ip: "{{ hostvars[vmanage_host].ansible_host }}"

    - name: Waiting for vManage API to start
      uri:
        url: "https://{{ vmanage_ip }}/dataservice/system/device/controllers"
        method: POST
        body:
          j_username: "{{ viptela_api_username }}"
          j_password: "{{ viptela_api_password }}"
        body_format: form-urlencoded
        return_content: yes
        validate_certs: no
      no_log: true
      register: uri_results
      delegate_to: localhost
      failed_when: false
      until: uri_results.msg.find("OK") != -1
      retries: 60
      delay: 10

- name: Configure vmanage
  hosts: localhost
  roles:
    - ansible-viptela
  tags:
    - control
    - vmanage
  any_errors_fatal: true
  gather_facts: no
  tasks:
    - set_fact:
        vmanage_host: "{{ groups.vmanage_hosts | first }}"

    - set_fact:
        vmanage_ip: "{{ hostvars[vmanage_host].ansible_host }}"

    - debug:
        msg: "vManage IP: {{ vmanage_ip }}"

    - set_fact:
        vbond_controller: "{{ groups.vbond_hosts[0] }}"

    - name: vManage Settings
      vmanage_settings:
        host: "{{ vmanage_ip }}"
        user: "{{ vmanage_user }}"
        password: "{{ vmanage_pass }}"
        organization: "{{ vmanage_org }}"
        vbond: "{{ hostvars[vbond_controller].viptela.transport_ip }}"
      register: result
      retries: 10
      delay: 10
      until: result is not failed 

    - name: Add Control Hosts
      vmanage_device:
        host: "{{ vmanage_ip }}"
        user: "{{ vmanage_user }}"
        password: "{{ vmanage_pass }}"
        device_username: admin
        device_password: admin
        name: "{{ item }}"
        personality: "{{ hostvars[item].viptela.personality }}"
        device_ip: "{{ hostvars[item].viptela.transport_ip }}"
      loop: "{{ groups.vbond_hosts + groups.vsmart_hosts }}"
      register: result
      retries: 10
      delay: 10
      until: result is not failed 

    - name: Add the Enterprise CA
      vmanage_settings:
        host: "{{ vmanage_ip }}"
        user: "{{ vmanage_user }}"
        password: "{{ vmanage_pass }}"
        ca_type: enterprise
        root_cert: "{{lookup('file', '{{ viptela_cert_dir }}/myCA.pem')}}"
      register: result
      retries: 10
      delay: 10
      until: result is not failed 

    - name: Generate CSRs
      vmanage_device_certificate:
        host: "{{ vmanage_ip }}"
        user: "{{ vmanage_user }}"
        password: "{{ vmanage_pass }}"
        name: "{{ item }}"
        device_ip: "{{ hostvars[item].viptela.transport_ip }}"
        state: csr
      loop: "{{ groups.sdwan_control }}"
      register: control_devices
      retries: 10
      delay: 10
      until: control_devices is not failed 

    - name: Write out CSR
      copy:
        content: "{{ item.deviceCSR }}"
        dest: "{{ viptela_cert_dir }}/{{ item.item }}.csr"
      loop: "{{ control_devices.results }}"
      delegate_to: localhost

    - name: Sign Controller Cert
      openssl_certificate:
        csr_path: "{{ viptela_cert_dir }}/{{ item }}.csr"
        path: "{{ viptela_cert_dir }}/{{ item }}.crt"
        provider: ownca
        ownca_path: "{{ viptela_cert_dir }}/myCA.pem"
        ownca_privatekey_path: "{{ viptela_cert_dir }}/myCA.key"
        ownca_privatekey_passphrase: "{{ viptela_CA_passphrase }}"
        # select_crypto_backend: pyopenssl
      loop: "{{ groups.sdwan_control }}"
      delegate_to: localhost

    - name: Add Certificate to Control Hosts
      vmanage_device_certificate:
        host: "{{ vmanage_ip }}"
        user: "{{ vmanage_user }}"
        password: "{{ vmanage_pass }}"
        name: "{{ item }}"
        device_ip: "{{ hostvars[item].viptela.transport_ip }}"
        cert: "{{lookup('file', '{{ viptela_cert_dir }}/{{ item }}.crt')}}"
      loop: "{{ groups.sdwan_control }}"
      register: result
      retries: 10
      delay: 10
      until: result is not failed 

    - name: Push Certs to Controllers
      vmanage_device_certificate:
        host: "{{ vmanage_ip }}"
        user: "{{ vmanage_user }}"
        password: "{{ vmanage_pass }}"
        state: push
      register: result
      retries: 10
      delay: 10
      until: result is not failed 

    - name: Install Serial File
      vmanage_fileupload:
        host: "{{ vmanage_ip }}"
        user: "{{ vmanage_user }}"
        password: "{{ vmanage_pass }}"
        file: "{{ serial_number_file }}"
      delegate_to: localhost
      register: result
      retries: 10
      delay: 10
      until: result is not failed 

    # - name: Do the thing
    #   uri:
    #     url: "https://{{ hostvars['vmanage1'].ansible_host }}/dataservice/system/device/sync/rootcertchain"
    #     method: GET
    #     headers:
    #       Cookie: "{{ viptela_api_cookie }}"
    #     validate_certs: no
    #     return_content: yes
    #   register: uri_results
    #   delegate_to: localhost

- name: Import vManage Templates
  hosts: localhost
  connection: local
  gather_facts: no
  roles:
    - ansible-viptela
  tags:
    - control
    - templates
  tasks:
    - set_fact:
        vmanage_host: "{{ groups.vmanage_hosts | first }}"

    - set_fact:
        vmanage_ip: "{{ hostvars[vmanage_host].ansible_host }}"

    - name: Import feature templates
      vmanage_feature_template:
        host: "{{ vmanage_ip }}"
        user: "{{ vmanage_user }}"
        password: "{{ vmanage_pass }}"
        state: present
        aggregate: "{{ vmanage_feature_templates }}"

    - name: Import device templates
      vmanage_device_template:
        host: "{{ vmanage_ip }}"
        user: "{{ vmanage_user }}"
        password: "{{ vmanage_pass }}"
        state: present
        aggregate: "{{ vmanage_device_templates }}"

- name: Attach template to device
  hosts: sdwan_edge:&virl_hosts
  connection: local
  gather_facts: no
  tags:
    - start
    - edge
  roles:
    - ansible-virl
    - ansible-viptela
  tasks:
    - set_fact:
        vmanage_host: "{{ groups.vmanage_hosts | first }}"

    - set_fact:
        vmanage_ip: "{{ hostvars[vmanage_host].ansible_host }}"

    - name: Attach template to device
      vmanage_device_attachment:
        host: "{{ vmanage_ip }}"
        user: "{{ vmanage_user }}"
        password: "{{ vmanage_pass }}"
        uuid: "{{ viptela.uuid }}"
        device_name: "{{ inventory_hostname }}"
        system_ip: "{{ viptela.system_ip }}"
        site_id: "{{ viptela.site_id }}"
        template: "{{ viptela.template.name }}"
        variables: "{{ viptela.template.variables | default(omit) }}"
        wait: yes
        state: present
      when: viptela.template is defined
      register: attachment_results

- name: Bootstrap the SD-WAN edge nodes
  hosts: sdwan_edge:&virl_hosts
  connection: local
  gather_facts: no
  tags:
    - start
    - edge
  roles:
    - ansible-viptela
  serial: 1
  # This is a workaround for a bug in vmanage.  When multiple requests
  # for boostrap are made to vmanage at the same time, it gets corrupted
  tasks:
    - set_fact:
        vmanage_host: "{{ groups.vmanage_hosts | first }}"

    - set_fact:
        vmanage_ip: "{{ hostvars[vmanage_host].ansible_host }}"

    - name: Get bootstrap info
      vmanage_device_bootstrap:
        host: "{{ vmanage_ip }}"
        user: "{{ vmanage_user }}"
        password: "{{ vmanage_pass }}"
        uuid: "{{ viptela.uuid }}"
      register: result
      retries: 10
      delay: 10
      until: result is not failed 

    - name: Generating day0 config
      set_fact:
        day0_config: "{{ result.bootstrap.bootstrapConfig }}"
      when: result.bootstrap.bootstrapConfig is defined

- name: Start the SD-WAN edge nodes
  hosts: sdwan_edge:&virl_hosts
  connection: local
  gather_facts: no
  tags:
    - start
    - edge
  roles:
    - ansible-virl
  tasks:
    - name: Start Node
      virl_node:
        name: "{{ inventory_hostname }}"
        host: "{{ virl_host }}"
        user: "{{ virl_username }}"
        password: "{{ virl_password }}"
        lab: "{{ virl_lab }}"
        state: started
        image_definition: "{{ virl.image_definition | default(omit) }}"
        config: "{{ day0_config | default(omit) }}"

- name: Push Certs to Controllers
  hosts: sdwan_edge:&virl_hosts
  connection: local
  gather_facts: no
  tags:
    - start
    - edge
  roles:
    - ansible-virl
    - ansible-viptela
  tasks:
    - set_fact:
        vmanage_host: "{{ groups.vmanage_hosts | first }}"

    - set_fact:
        vmanage_ip: "{{ hostvars[vmanage_host].ansible_host }}"

    - name: Push Certs to Controllers
      vmanage_device_certificate:
        host: "{{ vmanage_ip }}"
        user: "{{ vmanage_user }}"
        password: "{{ vmanage_pass }}"
        state: push
      register: result
      retries: 10
      delay: 10
      until: result is not failed 
      run_once: yes


# - name: Check connectivity to edges
#   hosts: colo_routers:&virl_hosts
#   tags:
#     - edge
#     - check_all
#     - check_edge
#   any_errors_fatal: true
#   connection: network_cli
#   gather_facts: no
#   tasks:
#     - ios_ping:
#         dest: "{{ hostvars[item].vpn_instances[0].interfaces[0].ip.address | ipaddr('address') }}"
#       loop: "{{ groups.sdwan_edge | intersect(groups.virl_hosts) }}"
#       when: hostvars[item].vpn_instances is defined
#       register: result
#       retries: 10
#       delay: 10
#       until: result is not failed 


    # - name: Do the thing
    #   uri:
    #     url: "https://{{ hostvars['vmanage1'].ansible_host }}/dataservice/system/device/sync/rootcertchain"
    #     method: GET
    #     headers:
    #       Cookie: "{{ viptela_api_cookie }}"
    #     validate_certs: no
    #     return_content: yes
    #   register: uri_results
    #   delegate_to: localhost